<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.yingxs.mybatis.dao.EmployeeMapperDynamicSQL">

	<!-- 查询员工 要求，携带了哪个字段查询条件就带上这个字段的值 -->
	<!-- List<Employee> getEmpsByConditionIf(Employee employee); -->
	<select id="getEmpsByConditionIf"
		resultType="com.yingxs.mybatis.bean.Employee">
		select * from tbl_employee
		where 1=1
		<!-- test:判断表达式（OGNL） 从参数中取值判断 -->
		<if test="id!=null">
			and id=#{id}
		</if>
		<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
			and last_name like #{lastName}
		</if>
		<if test="email!=null and email.trim()!=&quot;&quot;">
			and email=#{email}
		</if>
		<!-- ognl会进行字符串与数字的转换判断 -->
		<if test="gender==0 or gender==1">
			and gender=#{gender}
		</if>
	</select>

	<!-- List<Employee> getEmpsByConditionTrim(Employee employee); -->
	<select id="getEmpsByConditionTrim"
		resultType="com.yingxs.mybatis.bean.Employee">
		select * from tbl_employee
		<!-- 后面多余的and或者or where不能解决 prefix="":前缀，给拼串后的整个字符串加一个前缀 prefixOverrides="":前缀覆盖，去掉整个字符串前面多余的部分 
			suffix="":后缀，给拼串后的整个字符串加一个后缀 suffixOverrides="":后缀覆盖，去掉整个字符串后面多余的部分 -->
		<!-- 字符串的截取规则 -->
		<trim prefix="where" suffixOverrides="and">
			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
				last_name like #{lastName} and
			</if>
			<if test="email!=null and email.trim()!=&quot;&quot;">
				email=#{email} and
			</if>
			<!-- ognl会进行字符串与数字的转换判断 -->
			<if test="gender==0 or gender==1">
				gender=#{gender}
			</if>
		</trim>
	</select>

	<!-- 如果携带了id就用id查，如果带了lastName就用lastName查，只使用一个条件 -->
	<!-- List<Employee> getEmpsByConditionChoose(Employee employee); -->
	<select id="getEmpsByConditionChoose"
		resultType="com.yingxs.mybatis.bean.Employee">
		select * from tbl_employee
		<where>
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email=#{email}
				</when>
				<otherwise>
					gender=0
				</otherwise>
			</choose>
		</where>
	</select>

	<!-- update tbl_employee set last_name=#{lastName},email=#{email},gender=#{gender} 
		where id=#{id} -->
	<!-- void updateEmp(Employee employee); -->
	<update id="updateEmp">
	<!-- 
	 	方式一 :(推荐)	-->
	 	
		update tbl_employee
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender},
			</if>
		</set> 
		where id=#{id}
	
	
	<!-- 方式二：	
		update tbl_employee
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender},
			</if>
		</trim>
		where id=#{id}
 	-->
 	
	</update>
	
	<!-- 
		List<Employee> getEmpsByConditionForeach(List<Integer> ids);
		select * from tbl_employee  where id in(1,2,3,4)
	 -->
	<select id="getEmpsByConditionForeach" resultType="com.yingxs.mybatis.bean.Employee">
		select * from tbl_employee  where id in
		<!-- 
			collection:指定要遍历的集合
				list类型的参数会特殊处理封装在map中，map的key就叫list
			item:将当前遍历出的元素赋值给指定的变量
			separator:每个元素之间的分隔符
			open:遍历的结果前面加一个前缀
			close:遍历的结果后面加一个后缀
			index:索引，遍历list的时候index就是索引，item就是当前值
					  遍历map的时候index表示的就是map的key,item就是map的值
			
			#{变量名 }
		 -->
		 <foreach collection="ids" item="item_id" separator="," open="(" close=")">
		 	#{item_id}
		 </foreach>
		 
	</select>
	
	<!-- 批量保存  -->
	<!-- void addEmps(@Param("emps")List<Employee> emps); -->
	<!-- MySQL下批量保存：可以foreach遍历 mysql支持values(),(),()语法 -->
	<!-- 
	<insert id="addEmps">
		insert into tbl_employee(last_name,email,gender,d_id)
		values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>
 	-->
 	
 	<!-- Oracle批量保存  不支持values(),(),()语法  -->
	<!-- 1.多个insert放在begin - end里面 	
		begin
			...
		end
	-->
	<!-- 2.使用中间表的方式 
		insert into employees(employee_id,last_name,email)
			select employees_seq.nextval,lastName,email from(
				select 'test_a_01' lastName , 'test_a_e01' email from dual
				union
				select 'test_a_02' lastName , 'test_a_e02' email from dual
				union
				select 'test_a_03' lastName , 'test_a_e03' email from dual
			)
	 -->	






















</mapper>
  