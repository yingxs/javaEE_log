<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<properties resource="dbconfig.properties"></properties>
	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true" />
	</settings>

	<!-- 别名处理器 ：可以为java类型提供别名 -->
	<typeAliases>
		<!-- typeAlias：为某个java类型起别名，别名不区分大小写 type:指定要起别名的类型全类名；默认别名就是类名小写 alias:指定别名 -->
		<!-- <typeAlias type="com.yingxs.mybatis.bean.Employee" alias="emp" /> -->


		<!-- 为某个包下所有类批量起别名 name：指定包名 (为当前包以及下面所有的后代包的每一个类都起一个默认别名(类名小写)) -->
		<package name="com.yingxs.mybatis.bean" />
		<!-- 批量起别名的情况下，在类上使用@Alias注解为某个类型指定新的别名 -->
	</typeAliases>

	<!-- environments 环境，mybatis可以配置多种环境，default指定当前使用的环境，快速切换环境 environment：配置一个具体的环境信息 
		必须有两个标签 ,id属性代表当前环境的唯一标识符 transactionManager 配置事务管理器 type:事务管理器的类型 JDBC|MANAGED 
		如果使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。 自定义事务管理器：实现TransactionFactory接口，type指定为全类名 
		dataSource：数据源 type:数据源类型 UNPOOLED|POOLED|JNDI 自定义数据源：实现DataSourceFactory 
		type是全类名 -->

	<environments default="dev_mysql">
		<environment id="dev_mysql">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		<environment id="dev_oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>
	</environments>

	<databaseIdProvider type="DB_VENDOR">
		<property name="MySQL" value="mysql" />
		<property name="Oracle" value="oracle" />
		<property name="SQL Server" value="sqlserver" />
	</databaseIdProvider>

	<!-- 引入sql映射文件 -->
	<mappers>
	<!-- mapper:注册一个sql映射
			1.注册配置文件
				resource:引用类路径下的sql映射文件
				url:引用网络路径或者磁盘路径
			
			2.注册接口：
				class：引用接口
					a.有sql映射文件，映射文件名必须和接口同名，并且放在与接口的同一目录
					b.没有映射文件，所有sql都是利用注解写在接口上
			不重要的，简单的DAO接口用注解写sql
			重要的，复杂的DAO用映射文件
	
	 -->
		<mapper resource="EmployeeMapper.xml" />
		<mapper class="com.yingxs.mybatis.dao.EmployeeMapperAnnotaion"/>
		
		<!-- 批量注册 映射文件名必须和接口同名，并且放在与接口的同一目录 -->
		<package name="com.yingxs.mybatis.dao"/>
	</mappers>
</configuration>